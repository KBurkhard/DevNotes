

20180327 - emojis in android
- classes
    - EmojiCompat
    - EmojiTextViewHelper
    - EmojiProcessor
      - takes unicode char and returns EmojiSpan
    - EmojiSpan
      - subclass of ReplacementSpan
      - helps draw images for characters
      - draws emoji onto Canvas between characters
- config
  - BundledEmojiComaptConfig
  


20180327 - MVI (model view intent) pattern
- garima jain
(---)
- why MVI
  - MVP/MVVM -> MVI
  - MVI -> similar to Satat View Intention
  
- MVPI?

- reducer
  - f(previous state, result) -> new state
  
- hannes dorfmann MVI series
- jake wharton youtube talk, on state
- Benoit Quenaudon youtube talk + github.com/oldergod
- dan abramov egghead.io couse
  - egghead.io/courses/getting-started-with-redux

  


20180327 - flux framework developed by facebook
- shohei kawano, @shaunkawano
(---)
- components
  - view
  - action helpper
  - action
  - dispatcher
  - store
    - state manager (the only one in the application)
  
- benefits
  - makes application DRY
  - code conistency with minimal boilerplates
  -
  
- flux relates to the redux architecture
  - diff is that redux only has one store in the app
  - flux can create multiple stores
  
- other libs that he uses
  -
  - data binding
  - RxJava
  - greenrobot/eventbus
  - uber/autodispose
  - trello/navi
  
  



20180327 - poor programming paradigms
- alice yuan, company: pinterest, github.com/AliceYuan
- issues
  - prblem: protected vars View in abstract class
    - issue as they grow is that they can modified by any inheriting class
    - also inheritence hell
    - solve with inheritance vs comlposition
    - in kotlin, classes are final by default
  - problem: events
    - handling button push and GUI updates
    - solution is observer/listener pattern
      - implements FollowListener (for pinetersest gui update)
  - problem: data consistensty issues, caching models on a per fragment basis
    - models need to be centralized away fro m gragments
    - keep model dependent logic in the models
    - avoid singleton class to store model
    - solution: store all data in repositories
      - interface RepositoryListner<Model> {
        onSuccess()
        
      }
    - also RxJava
      - at pinterest, use it for repository
      - an Observable on steroids
        - observable stream
        
  - problem: no unit tests
    - roboelectric mockouts -
    - sol: MVV, MVP, MVI (Moedl-View-ViewModel, Model-View-Presenter, Model-View-Intent)
      - seperate concernes between entities that dont' know about each other
      - pinterst uses MVP
      - seperation of concersn makes it easier to test
        - can easily mock out the interfaces
        
- seperation of concersn
  - makes code cleaner
    - easier to read classes si nce they are singularly focused
  - increases reusability of the code base
  - can also be used to build llibraries and modularizing the code base
  
- conclusog
  - compostion over inheritance
  - use tight couploing for eevnst with RxJava
  - central location to retireve models
  - seperation of concerns with interfaces
  
- slides:  bit.ly/2pN6pBM
- rxjava marbles web site



20180327 - REST security
- potentil issues
  - GET calls with exposed params, using non encrypted http (not https), so human readable
  - application saving username/password on cell phone in plain text
    - issues: plain text, on device
    - fix: use shared preference in private mode, so only accessible by your app
      - tetString()
      - also open files in private mode
    - fix: AndroidKeyStore
      - java cryptography implementation
      
  - OAUTH
  - json web token
    - combined with json web signature
    - JWT + JWS (json web token + json web signature)
      - can have limited tokens
      - JWT can heps with:
        - authenticatyion
        - authorization
        - federated identity
        - information exchange
        - client side sessions (stateless sessions)
        - client side secrest
       
  - firebase auth
    - federated auth providers
    - passwordless login
    - anonymous authentication
    - mangement
    
  
- good practices
  - use mCAPTCHA
    - can use in androd to make sure rest endpoint doesn't respond to robots
    - since android app generates the captcha with the key you have, then can be verifies by REST service
    
- oath0.com/e-books/
- github.com/itrjwyss


20180327 - deisgn, develop and test
- kelly shuster
  - tools for better inter disciplinary team collaboration
    - zeplin product
      - good for design team to use
      - pai dproduct
    - style guide
      - button states
      - limit colors, how many different there are
      - use svgs for buttons
        - import with vector asset studio
      -

  - two types of testing
    - in house user testing (design testing)
      - usabilityhub tool
        - select users to look at your design
        - get heat map of clicks on image of screen design
        -
      - marvel
        - takes image and create an app for it
        
    - types
      - unit testing
      - integration testing
      - concept of dog fooding
        - alweays use tour product
        - open your own app during down time and play with your app
      - create different emulatords and name them for day of the week
        - different apis for each
        - helps with fixing UI bugs
        - use different emulator each day
        
        

        
        
        
        
- to dos
  - sign up to usability hub
  


  


